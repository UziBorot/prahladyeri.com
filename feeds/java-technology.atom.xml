<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prahlad Yeri - Freelance Programmer - Java, Technology</title><link href="/" rel="alternate"></link><link href="/feeds/java-technology.atom.xml" rel="self"></link><id>/</id><updated>2015-12-30T22:36:00+05:30</updated><entry><title>Eclipse Mars - Not ready for Linux Yet</title><link href="/blog/2015/12/eclipse-mars-not-ready-for-linux.html" rel="alternate"></link><published>2015-12-30T22:36:00+05:30</published><updated>2015-12-30T22:36:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2015-12-30:/blog/2015/12/eclipse-mars-not-ready-for-linux.html</id><summary type="html">&lt;p&gt;So after hearing about all the hype and praises about this Eclipse new release called &lt;a href="https://projects.eclipse.org/releases/mars"&gt;Mars&lt;/a&gt;, I decided to give it a try on my Ubuntu laptop yesterday. Since I already use &lt;code class="highlighter-rouge"&gt;Kepler&lt;/code&gt; the older version, I was looking for some big positives like performance improvements (most often talked about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So after hearing about all the hype and praises about this Eclipse new release called &lt;a href="https://projects.eclipse.org/releases/mars"&gt;Mars&lt;/a&gt;, I decided to give it a try on my Ubuntu laptop yesterday. Since I already use &lt;code class="highlighter-rouge"&gt;Kepler&lt;/code&gt; the older version, I was looking for some big positives like performance improvements (most often talked about by a lot of Eclipse fans lately).&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eclipse Red Logo" src="/uploads/old/eclipse-red.png"&gt;&lt;/p&gt;
&lt;p&gt;When I started this new &lt;code class="highlighter-rouge"&gt;eclipse&lt;/code&gt; on ubuntu, I first had a faint hope that it was running faster (maybe a trick of the mind instilled by the new red logo!). But the true test of any software is how it performs under REAL world conditions. Alas! As I had expected, I was only to be disappointed on the performance front. Unless there is a drastic change in underlying core components such as a code refactoring or an improvement of graphic toolkit/library, the “performance” can only get worse, not better. After I created a simple &lt;em&gt;HelloADT&lt;/em&gt; project, here is what happened when I clicked on an Android Activity layout screen:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eclipse Mars" src="/uploads/old/Eclipse_Mars.png"&gt;&lt;/p&gt;
&lt;p&gt;And this is a modern &lt;em&gt;Intel core i3&lt;/em&gt; machine we are talking about with 4 GB RAM, not some old device. Just after this disaster of an IDE happened, I started my good old &lt;code class="highlighter-rouge"&gt;kepler&lt;/code&gt; version and opened the same ADT project which ran without any problems:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Eclipse Kepler" src="/uploads/old/Eclipse_Kepler.png"&gt;&lt;/p&gt;
&lt;p&gt;It was good that I had kept my kepler installation folder intact, so I was able to revert. So moral of the story is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take all claims about this “big improvement” with a pinch of salt, especially if it is a Java based software.&lt;/li&gt;
&lt;li&gt;Wait for &lt;code class="highlighter-rouge"&gt;Eclipse mars&lt;/code&gt; to get more stable before using it for production work.&lt;/li&gt;
&lt;/ol&gt;</content><category term="Eclipse"></category><category term="Java"></category></entry><entry><title>Rockstar Java Series: Use default methods and be a better coder</title><link href="/blog/2015/12/rockstar-java-series-use-default-methods-and-be-a-better-coder.html" rel="alternate"></link><published>2015-12-21T21:23:00+05:30</published><updated>2015-12-21T21:23:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2015-12-21:/blog/2015/12/rockstar-java-series-use-default-methods-and-be-a-better-coder.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Java 8&lt;/strong&gt; comes with a lot more improvements and features than most people seem to realize. One such feature that can help you become a better Java coder is &lt;strong&gt;Default methods&lt;/strong&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;To learn just how useful this feature is, lets take a very plain simple example: A &lt;code class="highlighter-rouge"&gt;Product Interface&lt;/code&gt;. Suppose …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Java 8&lt;/strong&gt; comes with a lot more improvements and features than most people seem to realize. One such feature that can help you become a better Java coder is &lt;strong&gt;Default methods&lt;/strong&gt;.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;To learn just how useful this feature is, lets take a very plain simple example: A &lt;code class="highlighter-rouge"&gt;Product Interface&lt;/code&gt;. Suppose that you are a Java Engineer who is just appointed as the Backend Developer in Acme Trading Corporation to develop their new eCommerce system. Suppose Acme has a range of electronic products ranging from computers to cell phones and hard drives to printers. Being a design-oriented programmer, you develop a &lt;code class="highlighter-rouge"&gt;Product&lt;/code&gt; Interface and a generic &lt;code class="highlighter-rouge"&gt;BaseProduct&lt;/code&gt; class for all products:&lt;/p&gt;
&lt;figure class="highlight"&gt;
    //Product.java
    interface Product
    {
        String getName();
        void setName(String value);

        String getDescription();
        void setDescription(String value);

        double getRate();
        void setRate(double value);

    }

    //BaseProduct.java
    class BaseProduct implements Product
    {
        private String name;
        private String description;
        private double rate;


        public void setDescription(String value) {
            description = value;
        }

        public String getDescription() {
            return description;
        }

        public void setName(String value) {
            name = value;
        }

        public String getName() {
            return name;
        }

        public void setRate(double value) {
            rate = value;
        }

        public double getRate() {
            return rate;
        }

        public static void main(String[] args)
        {
            BaseProduct product = new BaseProduct();
            product.setName("Foo");
            System.out.println(product.getName());
        }
    }

&lt;/figure&gt;

&lt;p&gt;You realize that all products have at least these three things in common: &lt;code class="highlighter-rouge"&gt;Name&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Description&lt;/code&gt; and &lt;code class="highlighter-rouge"&gt;Rate&lt;/code&gt;. Then, you start implementing the &lt;code class="highlighter-rouge"&gt;Laptop&lt;/code&gt; class based on the &lt;code class="highlighter-rouge"&gt;BaseProduct&lt;/code&gt; class:&lt;/p&gt;
&lt;figure class="highlight"&gt;
    //Laptop.java
    class Laptop extends BaseProduct
    {
        private String cpuType;
        private int usbPorts;

        public String getCpuType() {
            return cpuType;
        }

        public void setCpuType(String value) {
            cpuType = value;
        }

        public int getUsbPorts() {
            return usbPorts;
        }

        public void setUsbPorts(int value) {
            usbPorts = value;
        }


        public static void main(String[] args)
        {
            Laptop laptop = new Laptop();
            laptop.setName("Dell Inspiron");
            System.out.println(laptop.getName());
        }
    }

&lt;/figure&gt;

&lt;p&gt;Now imagine that you have created lots of classes for all Acme products in this manner including &lt;code class="highlighter-rouge"&gt;Television&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Refregerator&lt;/code&gt;, &lt;code class="highlighter-rouge"&gt;Keyboard&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Now, you are just 10 days from releasing the final version of your mind-blowing Product Management System when suddenly your boss tells you that you also need a &lt;code class="highlighter-rouge"&gt;Rating&lt;/code&gt;, but only for some products. Naturally, you being a techie who just sips coffee in front of the computer screen the whole day just didn’t realize how the end customers might interact with your system. So, how will you add &lt;code class="highlighter-rouge"&gt;Rating&lt;/code&gt; to the system now?&lt;/p&gt;
&lt;p&gt;The classic approach in Java is to just add a &lt;code class="highlighter-rouge"&gt;Rating&lt;/code&gt; property to each and every individual product class of yours that needs a &lt;code class="highlighter-rouge"&gt;Rating&lt;/code&gt;:&lt;/p&gt;
&lt;figure class="highlight"&gt;
    //Laptop.java
    class Laptop
    {
        //Classic Java Programmer Approach
        public String getRating() {}
        public void setRating(float value) {}

        //.....
    }

&lt;/figure&gt;

&lt;p&gt;This is a pretty naive approach to this problem. For one, you already have about 100 classes for various products and you will have to go to each one and implement this method. Secondly, you will also break binary compatability with existing versions of your system, so you cannot release this one backend class without replacing your entire system. Another approach is to convert the &lt;code class="highlighter-rouge"&gt;Product&lt;/code&gt; interface to an abstract class, but again, why unnecessarily involve private state when it isn’t needed in the first place. Secondly, a &lt;code class="highlighter-rouge"&gt;BaseProduct&lt;/code&gt; can derive from only one abstract-class but multiple interfaces, so what will you do when you will have to implement more interfaces in future?&lt;/p&gt;
&lt;p&gt;The most apt solution to this problem is that provided by &lt;code class="highlighter-rouge"&gt;Java 8&lt;/code&gt;: &lt;em&gt;default method&lt;/em&gt;. Just add default methods for &lt;code class="highlighter-rouge"&gt;Rating&lt;/code&gt; to your interface as follows and problem solved!&lt;/p&gt;
&lt;figure class="highlight"&gt;
    //Product.java
    interface Product
    {
        //Rockstar Java Programmer Approach
        default String getRating() {
            System.out.println("I am the default method for getRating!");
            return "";
        }

        default void setRating(String value) {
            System.out.println("I am the default method for setRating!");
        }

        String getName();
        void setName(String value);

        String getDescription();
        void setDescription(String value);

        double getRate();
        void setRate(double value);
    }

&lt;/figure&gt;

&lt;p&gt;The single most important advantage of &lt;code class="highlighter-rouge"&gt;default method&lt;/code&gt; is &lt;code class="highlighter-rouge"&gt;interface evolution&lt;/code&gt; - meaning that your existing code won’t loose ABI (&lt;code class="highlighter-rouge"&gt;Application Binary Interface&lt;/code&gt;) with the new class. If your interface is a part of a libary jar that you distribute to your users, you can release the newer version without affecting the already running code that might be referring to older jars.&lt;/p&gt;
&lt;p&gt;The inspiration for this came when Oracle themselves had to extend the &lt;code class="highlighter-rouge"&gt;Collection&lt;/code&gt; interface and add a new &lt;code class="highlighter-rouge"&gt;stream&lt;/code&gt; method in &lt;code class="highlighter-rouge"&gt;Java 8&lt;/code&gt;. The &lt;code class="highlighter-rouge"&gt;Collection&lt;/code&gt; interface is very generic and a large number of classes implement that. If Oracle had to implement a &lt;code class="highlighter-rouge"&gt;stream&lt;/code&gt; method in each and every class derived from &lt;code class="highlighter-rouge"&gt;Collection&lt;/code&gt; interface, it would have taken them ages to release Java 8! Rather, they invented this helpful new feature, &lt;code class="highlighter-rouge"&gt;default method&lt;/code&gt; to extend their &lt;code class="highlighter-rouge"&gt;Collection&lt;/code&gt; interface. And now, they don’t have to worry about ABI. Old code referring to JDK 8 libraries will not fail because they are now binary compatible thanks to default methods!&lt;/p&gt;
&lt;p&gt;References:\
&lt;a href="http://stackoverflow.com/questions/19998454/interface-with-default-methods-vs-abstract-class-in-java-8"&gt;http://stackoverflow.com/questions/19998454/interface-with-default-methods-vs-abstract-class-in-java-8&lt;/a&gt;\
&lt;a href="http://programmers.stackexchange.com/questions/233053/why-were-default-and-static-methods-added-to-interfaces-in-java-8-when-we-alread"&gt;http://programmers.stackexchange.com/questions/233053/why-were-default-and-static-methods-added-to-interfaces-in-java-8-when-we-alread&lt;/a&gt;\
&lt;a href="http://examples.javacodegeeks.com/java-basics/java-8-default-methods-tutorial/"&gt;http://examples.javacodegeeks.com/java-basics/java-8-default-methods-tutorial/&lt;/a&gt;&lt;/p&gt;</content><category term="Java"></category></entry></feed>