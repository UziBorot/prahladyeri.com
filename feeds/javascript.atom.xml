<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Prahlad Yeri - Freelance Programmer - JavaScript</title><link href="/" rel="alternate"></link><link href="feeds/javascript.atom.xml" rel="self"></link><id>/</id><updated>2018-08-28T21:48:00+05:30</updated><entry><title>Userscript Recipe: Adding Auto-Refresh Button to GMail Classic</title><link href="blog/2018/08/userscript-recipe-adding-auto-refresh-button-to-gmail-classic.html" rel="alternate"></link><published>2018-08-28T21:48:00+05:30</published><updated>2018-08-28T21:48:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2018-08-28:blog/2018/08/userscript-recipe-adding-auto-refresh-button-to-gmail-classic.html</id><summary type="html">&lt;p&gt;Call me old, but I much prefer the older classic GMail interface to the modern bloated one. Not only is the classic version less bandwidth consuming, but also simplistic in nature with just the buttons and tools that we need.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;I somehow don't like it when zillions of AJAX scripts …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Call me old, but I much prefer the older classic GMail interface to the modern bloated one. Not only is the classic version less bandwidth consuming, but also simplistic in nature with just the buttons and tools that we need.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;I somehow don't like it when zillions of AJAX scripts do all kinds of magic in the background of the web-page. However, I still want the GMail tab to auto-refresh itself and check new mails while I'm working in another tab in my browser. If only Google provided a way to auto-refresh in the classic interface! Since there isn't one, I &lt;a href="https://gist.github.com/prahladyeri/b66ba873106474520577ff744aa1ed46"&gt;wrote a user-script&lt;/a&gt; to add this functionality:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_1009" align="alignnone" width="1171"]&lt;img alt="GMail Classic" class="size-full wp-image-1009" height="561" src="/uploads/2018/08/gmail_classic_final.png" width="1171"&gt; GMail Classic[/caption]&lt;/p&gt;
&lt;p&gt;You can use any Script extension for Chrome/Firefox such as &lt;strong&gt;GreaseMonkey&lt;/strong&gt; or &lt;strong&gt;TamperMonkey&lt;/strong&gt; to add this userscript to your browser. I really hope you find this userscript useful!&lt;/p&gt;</content><category term="JavaScript"></category></entry><entry><title>Backbone.Events+Promises+async/await is a great combination for building JavaScript apps</title><link href="blog/2018/07/backbone-events-promises-async_await-combination.html" rel="alternate"></link><published>2018-07-12T11:59:00+05:30</published><updated>2018-07-12T11:59:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2018-07-12:blog/2018/07/backbone-events-promises-async_await-combination.html</id><summary type="html">&lt;p&gt;At the risk of being a contrarian, I'd like to show in this article how exactly can the Backbone's Events model be combined with the more modern constructs of Promises and async/await to build a killer app using JavaScript.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;First, let's try to understand why do we need these …&lt;/p&gt;</summary><content type="html">&lt;p&gt;At the risk of being a contrarian, I'd like to show in this article how exactly can the Backbone's Events model be combined with the more modern constructs of Promises and async/await to build a killer app using JavaScript.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;First, let's try to understand why do we need these constructs for asynchronous programming when JavaScript itself is a mostly asynchronous language featuring events and function callbacks. The &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"&gt;Promise API&lt;/a&gt; was introduced in ES6 standard as a way of preventing callback hell:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;anotherFunction&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
  &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;yetAnotherFunction() {&lt;/span&gt;
    &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;reallyCoreFunction() {&lt;/span&gt;
      &lt;span class="c1"&gt;//readability sucks now!&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is only three layers of callbacks, imagine what will happen when there are a hundred of them which is quite possible in a medium sized web app with multiple ajax calls and a dynamic interface. To solve this problem, functions started returning a "Promise" object instead of a callback function, so instead of multiple layers of callbacks, we can now use "function chaining" using the &lt;strong&gt;then&lt;/strong&gt; keyword like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someFunction()
.then(function(){
  yetAnotherFunction();
})
.then(function(){
  reallyCoreFunction();
})
//readability is better now!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;As you can see, the Promise API has improved the readability to a considerable extent. Instead of a callback mechanism, the callee returns an object called &lt;strong&gt;Promise&lt;/strong&gt; which can be chained for further execution. For this to happen, the callee has to call resolve() in order for the caller to end the wait and trigger further execution in the next chain:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_921" align="alignnone" width="755"]&lt;img alt="Promise Model" class="size-full wp-image-921" height="222" src="/uploads/2018/07/promise_model.png" width="755"&gt; Promise Model[/caption]&lt;/p&gt;
&lt;p&gt;But the async/await construct goes even further than this. You don't even need to do function chaining using &lt;strong&gt;then&lt;/strong&gt;, but the &lt;strong&gt;await&lt;/strong&gt; keyword itself is enough to do this. Internally, the async/await model uses the Promise API to achieve its end because even in this model, the callee has to make the resolve() call in order to return execution control to the caller and the process continues after the next await statement:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_922" align="alignnone" width="755"]&lt;img alt="async await Model" class="size-full wp-image-922" height="222" src="/uploads/2018/07/async_await_model.png" width="755"&gt; async await Model[/caption]&lt;/p&gt;
&lt;p&gt;However, one disadvantage of async/await is that the caller can only wait, it cannot receive a returned value which is possible in the Promise model. Another disadvantage is that the caller function itself who invoked the await statement needs to be declared as async which means it cannot be a part of a sequential statements in another process, but has to work independently as shown &lt;a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function#Examples"&gt;in this example&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.brush: .js .line-numbers .language-js}
var sequentialStart = async function() {
  console.log('==SEQUENTIAL START==');
  const slow = await resolveAfter2Seconds(); // If the value of the expression following the await operator is not a Promise, it's converted to a resolved Promise.
  const fast = await resolveAfter1Second();
  console.log(slow);
  console.log(fast);
}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Finally, the most important thing here is to realize that both Promises and async/await are just one level of asynchrony, let's call this detail asynchrony or &lt;strong&gt;micro asynchrony&lt;/strong&gt;, but there is also the other kind that works at the broader level which can be termed &lt;strong&gt;macro asynchrony&lt;/strong&gt;, and this is where Backbone.Events comes into the picture.&lt;/p&gt;
&lt;p&gt;Consider that you have a complex web application with several views and each component should be able to trigger a message or event to any other component asynchronously in order for the app to render and function properly. Consider an app with a &lt;strong&gt;loginView&lt;/strong&gt; that needs to trigger an alert that a user has just signed in. Now, keeping the separation of concerns, the best practice here would be that the loginView shouldn't try to render that part of the DOM and leave it to the other component: &lt;strong&gt;navbarView&lt;/strong&gt;. Now, how can our loginView be able to "tell" the navbarView asynchronously over the wire to display that alert? Both Promises and async/await are of no use here, and hence we need a macro-level all-purpose &lt;strong&gt;Event Bus&lt;/strong&gt;, similar to the one that Backbone.js provides us:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_920" align="alignnone" width="757"]&lt;img alt="backbone.events Model" class="size-full wp-image-920" height="278" src="/uploads/2018/07/backbone.events_model.png" width="757"&gt; backbone.events Model[/caption]&lt;/p&gt;
&lt;p&gt;In this case, our caller and callee are inside separate components and don't even know each other. And separation of concerns imply that they cannot even contact each other directly. Now, Backbone provides this useful trigger/listen mechanism called &lt;strong&gt;Backbone.Events&lt;/strong&gt; using which any object in your app can listen to the events triggered on any other object! In this case, the loginView triggers an event called "navbarView.alert" and thus "tells" the navbarView that it has to do something (in this case show an alert). This mechanism also supports passing of any kind of data along with the triggering of event (in this case the &lt;em&gt;message&lt;/em&gt; parameter).&lt;/p&gt;
&lt;p&gt;Thus, we can see that combining the power of all these asynchronous models, we can easily handle any level of complexity in our app, provided that our &lt;a href="https://prahladyeri.com/blog/2018/07/the-right-way-to-architect-single-page-web-applications.html"&gt;app itself is structured in the right way from the start&lt;/a&gt;.&lt;/p&gt;</content><category term="Backbone"></category><category term="JavaScript"></category></entry><entry><title>How to create a Server-less Google Drive client using only HTML and JavaScript</title><link href="blog/2018/07/how-to-create-a-server-less-google-drive-client-using-only-htmljavascript.html" rel="alternate"></link><published>2018-07-09T12:23:00+05:30</published><updated>2018-07-09T12:23:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2018-07-09:blog/2018/07/how-to-create-a-server-less-google-drive-client-using-only-htmljavascript.html</id><summary type="html">&lt;p&gt;A few days ago, I had to work on a project of this kind and the information and documentation available on this topic was quite bewildering. As a result, I decided to write this article in order to make everything available at one place.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Almost everyone knows about the &lt;a href="https://github.com/google/google-api-python-client"&gt;Google …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;A few days ago, I had to work on a project of this kind and the information and documentation available on this topic was quite bewildering. As a result, I decided to write this article in order to make everything available at one place.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Almost everyone knows about the &lt;a href="https://github.com/google/google-api-python-client"&gt;Google API Python Client&lt;/a&gt;(and similar others in Java, PHP, etc.) which can be accessed from the server, but few are aware that Google even supports a totally server-less implementation of a client using only client-side technology (HTML/JavaScript). The only caveat here is that your app won't get a permanent access token like the server side apps do, but instead, has a temporary access until your web page isn't closed. Here is how to go about doing it:&lt;/p&gt;
&lt;h2&gt;Step-1: Register your App by visiting the Google Cloud Console:&lt;/h2&gt;
&lt;p&gt;As usual, visit the &lt;a href="https://console.cloud.google.com/"&gt;Google Cloud Console&lt;/a&gt;and register your app first, enable the Google Drive API by visiting "APIs &amp;amp; Services"=&gt;"Dashboard", then click on "Credentials" to create an API Key, an OAuth credential and setup the authentication screen for your user. While setting credentials, remember to add your app's URL in authorized Redirect-URIs section. If you have multiple URLs for your app (like localhost for testing, www.YourSite.com for production, etc., then add them all to the list):&lt;/p&gt;
&lt;p&gt;[caption id="attachment_875" align="alignnone" width="690"]&lt;img alt="Credentials Configuration Redirect URIs" class="size-full wp-image-875" height="397" src="/uploads/2018/07/credentials_config_redirect_uri.png" width="690"&gt; Credentials Configuration: Redirect URIs[/caption]&lt;/p&gt;
&lt;h2&gt;Step-2: Setup the OAuth consent screen.&lt;/h2&gt;
&lt;p&gt;This is what your user will see when they visit your app and it redirects them to Google for getting permissions for Drive access. Click on the "OAuth consent screen" tab and configure it with your app's name, logo, etc.&lt;/p&gt;
&lt;h2&gt;Step-3: Add script references.&lt;/h2&gt;
&lt;p&gt;After you create the credentials and get your ClientID, API Key and secret key (not useful for our app, really), the next step is to start building the app. I usually prefer to keep the JavaScript logic in a separate file such as app.js instead of keeping it in the main index.html. Just add a script tag in your main index.html and add a reference to this app.js in which you'll write the Google Drive logic:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/static/app.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I've kept the app.js in a sub-folder named /static, if yours is different, then adjust the path accordingly. You'll also need to add a reference to Google authentication library in order to perform the OAuth authentication:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="err"&gt;async&lt;/span&gt; &lt;span class="err"&gt;defer&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://apis.google.com/js/api.js&amp;quot;&lt;/span&gt; 
 &lt;span class="na"&gt;onload=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;this.onload=function(){};handleClientLoad()&amp;quot;&lt;/span&gt; 
 &lt;span class="na"&gt;onreadystatechange=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;if (this.readyState === &amp;#39;complete&amp;#39;) this.onload()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, also add a reference to jQuery if you want to use it. In most apps, its usually a must!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;src=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Step-4: Build the app.&lt;/h2&gt;
&lt;p&gt;Now, in your app.js, first add global variables that you'll need throughout your app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;GoogleAuth&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;SCOPE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.googleapis.com/auth/drive&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;metadata&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;readonly&lt;/span&gt;
&lt;span class="nt"&gt;SCOPE&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; https://www.googleapis.com/auth/drive.install&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="nt"&gt;SCOPE&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot; https://www.googleapis.com/auth/drive.file&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="nt"&gt;var&lt;/span&gt; &lt;span class="nt"&gt;files&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nt"&gt;array&lt;/span&gt; &lt;span class="nt"&gt;to&lt;/span&gt; &lt;span class="nt"&gt;store&lt;/span&gt; &lt;span class="nt"&gt;the&lt;/span&gt; &lt;span class="nt"&gt;list&lt;/span&gt; &lt;span class="nt"&gt;of&lt;/span&gt; &lt;span class="nt"&gt;files&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;user&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;s&lt;/span&gt; &lt;span class="nt"&gt;drive&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the scopes as per your requirements, I had included &lt;strong&gt;auth/drive.install&lt;/strong&gt; and &lt;strong&gt;auth/drive.file&lt;/strong&gt; only because I had to provide an "open with this app" feature in the user's own google drive interface so that they may visit our app and run their files through it, and thus use it as a "file opener". If you don't need to provide such extended features and just want full access to the user's files, then the first one (&lt;strong&gt;auth/drive&lt;/strong&gt;) is sufficient.&lt;/p&gt;
&lt;p&gt;After that, write the entry point for our app in app.js. As per the script attribute, you'll be redirected here by the Google authentication library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt;* This is the entry-point that gapi calls.&lt;/span&gt;
&lt;span class="cm"&gt;* &lt;/span&gt;
&lt;span class="cm"&gt;* */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;handleClientLoad() {&lt;/span&gt;
 &lt;span class="c1"&gt;// Load the API&amp;#39;s client and auth2 modules.&lt;/span&gt;
 &lt;span class="c1"&gt;// Call the initClient function after the modules load.&lt;/span&gt;
 &lt;span class="nx"&gt;gapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client:auth2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;initClient&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;gapi.load()&lt;/strong&gt; loads the auth library and prepares your app for authentication, then signals the control to &lt;strong&gt;initClient()&lt;/strong&gt; function where you'll perform the actual authentication like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * starts the client authorization, most useful for debugging.&lt;/span&gt;
&lt;span class="cm"&gt; * &lt;/span&gt;
&lt;span class="cm"&gt; * */&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;initClient() {&lt;/span&gt;
    &lt;span class="c1"&gt;// Retrieve the discovery document for version 3 of Google Drive API.&lt;/span&gt;
    &lt;span class="c1"&gt;// In practice, your app can retrieve one or more discovery documents.&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;discoveryUrl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://www.googleapis.com/discovery/v1/apis/drive/v3/rest&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="c1"&gt;// Initialize the gapi.client object, which app uses to make API requests.&lt;/span&gt;
    &lt;span class="c1"&gt;// Get API key and client ID from API Console.&lt;/span&gt;
    &lt;span class="c1"&gt;// &amp;#39;scope&amp;#39; field specifies space-delimited list of access scopes.&lt;/span&gt;
    &lt;span class="nx"&gt;gapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;init&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
        &lt;span class="nx"&gt;apiKey&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;discoveryDocs&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;discoveryUrl&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="nx"&gt;clientId&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yyyyyyyyyy-yyyyyyyyyyyyyy.apps.googleusercontent.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="nx"&gt;scope&lt;/span&gt;: &lt;span class="kt"&gt;SCOPE&lt;/span&gt;
    &lt;span class="p"&gt;}).&lt;/span&gt;&lt;span class="nx"&gt;then&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;init happened successfully.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;GoogleAuth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;gapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;auth2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getAuthInstance&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;now binding updateSigninStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;GoogleAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;updateSigninStatus&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;// Listen for sign-in state changes.&lt;/span&gt;

      &lt;span class="c1"&gt;// Listen for sign-in state changes.&lt;/span&gt;
      &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;now calling updateSigninStatus&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
      &lt;span class="nx"&gt;updateSigninStatus&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;GoogleAuth&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isSignedIn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;get&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;

      &lt;span class="c1"&gt;// Handle initial sign-in state. (Determine if user is already signed in.)&lt;/span&gt;
      &lt;span class="c1"&gt;//var user = GoogleAuth.currentUser.get();&lt;/span&gt;

      &lt;span class="c1"&gt;// Call handleAuthClick function when user clicks on&lt;/span&gt;
      &lt;span class="c1"&gt;//      &amp;quot;Sign In/Authorize&amp;quot; button.&lt;/span&gt;
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#sign-in-or-out-button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;handleAuthClick&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt; 
      &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#revoke-access-button&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;revokeAccess&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
      &lt;span class="p"&gt;});&lt;/span&gt;

    &lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;ERROR in gapi.init:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;error&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Remember to replace the long string of "xxxxxx..." with your own API Key, and the long string of "yyyyyy...." with your own Client ID)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gapi.client.init()&lt;/strong&gt; is an important function which does all the hard work of checking whether a user is authenticated, and if not, then redirect them to Google's servers, perform the authentication, and if successful, redirect them back to your server and inside the &lt;strong&gt;.then()&lt;/strong&gt; block in which you'll handle your applications logic (like displaying the logged-in user's name which you get using &lt;strong&gt;GoogleAuth.currentUser.get()&lt;/strong&gt;, update the logged-in status (toggle sign-in and sign-out buttons accordingly), etc:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;gapi.client&lt;/strong&gt; is your global variable that could be used for doing all kinds of stuff. For example, this is how you can list the files available in the Google Drive's root folder of the user as links in your document:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="nt"&gt;gapi&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;client&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;drive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;files&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;fileId&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name,webContentLink&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;then&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;success&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;webContentLink&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;success.result.webContentLink&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;var&lt;/span&gt; &lt;span class="err"&gt;fileName&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;success.result.name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;console.log(&amp;quot;SUCCESS!&lt;/span&gt; &lt;span class="err"&gt;name&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, webContentLink);&lt;/span&gt;
&lt;span class="s2"&gt;        console.log(&amp;quot;&lt;/span&gt;&lt;span class="n"&gt;SUCCESS&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;webContentLink&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;, webContentLink);&lt;/span&gt;
&lt;span class="s2"&gt;        $source = $(&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot; + webContentLink + &amp;quot;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; + fileName + &amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="err"&gt;$(&amp;#39;body&amp;#39;).append($source)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nt"&gt;function&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;fail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;console.log(fail)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;console.log(&amp;#39;Error&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;+&lt;/span&gt; &lt;span class="err"&gt;fail.result.error.message)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;name&lt;/strong&gt; field represents the file name and &lt;strong&gt;webContentLink&lt;/strong&gt; is the actual link to the file in the user's drive, you can use it however in your app once you get it (like download it using the AJAX &lt;strong&gt;jquery.get()&lt;/strong&gt; method, etc.).&lt;/p&gt;</content><category term="HTML"></category><category term="JavaScript"></category></entry><entry><title>The Right Way to Architect Single Page Web Applications</title><link href="blog/2018/07/the-right-way-to-architect-single-page-web-applications.html" rel="alternate"></link><published>2018-07-06T15:54:00+05:30</published><updated>2018-07-06T15:54:00+05:30</updated><author><name>Prahlad Yeri</name></author><id>tag:None,2018-07-06:blog/2018/07/the-right-way-to-architect-single-page-web-applications.html</id><summary type="html">&lt;p&gt;Lets face it, Web Apps are a complex and complicated beast, both on the front end and back end. The reason we had to come up with so many frameworks and libraries (angular/backbone/react/vue/marionette/require.js/etc.) is that the whole process is quite difficult and convoluted …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Lets face it, Web Apps are a complex and complicated beast, both on the front end and back end. The reason we had to come up with so many frameworks and libraries (angular/backbone/react/vue/marionette/require.js/etc.) is that the whole process is quite difficult and convoluted.&lt;!--more--&gt;&lt;/p&gt;
&lt;p&gt;Once your app starts to scale in complexity, even the best of ideas and best practices in this field cannot prevent your app code from becoming a spaghetti of JavaScript and jQuery callbacks and DOM manipulation functions. Turning into a mess is essentially the nature of JavaScript when left to its own mechanism (event callback model and high asynchrony do ensure that). If you only use jQuery to architect your app, this is what it'll soon end up becoming:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_816" align="alignnone" width="956"]&lt;img alt="The Spaghetti Way" class="size-full wp-image-816" height="254" src="/uploads/2018/07/spaghetti-way.png" width="956"&gt; The Spaghetti Way[/caption]&lt;/p&gt;
&lt;p&gt;Once your app.js ends up with millions of these jQuery functions, it will soon become beyond understanding and sanity even for you as the author of the code. And that's exactly why we need to understand this complexity and architect some structure and foundation in our apps.&lt;/p&gt;
&lt;p&gt;One way of handling this complexity is the easy way - just delegate this whole thing to another complex beast of an opinionated framework such as angular or vue, and work with simple abstractions like angular views and controllers. This strategy does work to an extent (and you do get some mental sense of achievement too) but only as long as your app is limited in functionality and doesn't scale in size and complexity. The problem with opinionated frameworks is that they are opinionated - they work only as long as your app is pigeonholed and fits in their own way of typically doing things, but the moment you step outside and want to do something that doesn't confirm to that way (like rendering a complex DOM element or work with a difficult third-party UI library), then you are hit with a wall - unless you are prepared to venture too deeply into that framework and learn advanced stuff (like creating complex directives or providers in angular). But if you had to resort to that at the end, then why use an opinionated framework at all!&lt;/p&gt;
&lt;p&gt;[caption id="attachment_818" align="alignnone" width="1089"]&lt;img alt="The Opinionated Framework Way" class="size-full wp-image-818" height="400" src="/uploads/2018/07/opinionated-way.png" width="1089"&gt; The Opinionated Framework Way[/caption]&lt;/p&gt;
&lt;p&gt;As you can see in above diagram, using an opinionated framework is like driving a car with automatic gear system. You cannot control the speed or acceleration, nor can you synchronize the clutch action, its the black box of the automatic gear that does it for you. But unlike this simple gearbox analogy where speed and clutch synchrony are the only two variables, your web app has lots of variables, so the chances of going wrong and getting stuck with this approach drastically increases as your web app starts to scale in complexity. Manually doing things using the Backbone way may appear to be difficult or complex initially, but that's a much better way than trading off that complexity for an opinionated black-box framework about who's inner workings you don't understand anything at all.&lt;/p&gt;
&lt;p&gt;The first step towards building a single page app should be deciding what your app is going to do and how its going to do it. Every app is different in features, functionality and work flow, hence it pays to use an uber-light framework such as Backbone instead of any heavy and opinionated ones. Backbone in the frameworks world is pretty much like what jQuery is in the libraries world, it doesn't do much on its own besides giving you methods and objects for creating a layer of structure and organization (just as jQuery doesn't do much on its own besides adding a sugar-syntax wrapper for native DOM manipulation functions of JavaScript).&lt;/p&gt;
&lt;p&gt;Now, because of this exact flexibility and freedom, there is no one correct way to build Backbone apps. Backbone is heavy in philosophy and light in implementation, and the philosophy being simple:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Separation of concerns (models, views and other components should be kept separate).&lt;/li&gt;
&lt;li&gt;Separation of roles (Organizers and implementors should do their own thing, one shouldn't step into the shoes of others).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Personally, I think that if you follow only these two principles sincerely and stick to them, then you can handle whatever amount complexity life throws at your app. Of course, to architect such an app is an art in itself and you may not get it right the first time. The architecture itself may even need to evolve with time and complexity as your app grows and scales. One global event coordinator (or organizer) can be enough initially, but later on, you may have to add a DOM coordinator for handling DOM events, a data coordinator for handling connections to the database objects, etc. as you scale.&lt;/p&gt;
&lt;p&gt;Here is a basic example architecture that you can probably use for an app of low to medium complexity:&lt;/p&gt;
&lt;p&gt;[caption id="attachment_831" align="alignnone" width="884"]&lt;img alt="The Backbone Way" class="size-full wp-image-831" height="536" src="/uploads/2018/07/backbone-way1.png" width="884"&gt; The Backbone Way[/caption]&lt;/p&gt;
&lt;p&gt;And &lt;a href="https://github.com/prahladyeri/experimental-backbone"&gt;this is an example implementation&lt;/a&gt; which I'm developing as a side project. Of course, the app doesn't do much presently besides user management and routing to dummy pages,&lt;/p&gt;
&lt;p&gt;Of course, this isn't the only Backbone way to build apps, but I think its a good one for a start. The primary problem you'll face if you stick to doing things your own way and not use an opinionated framework is that of organization. You need an organizer/coordinator object to co-ordinate with various components of your app and keep them in sync with each other and this is where the Backbone.Events API provided by the framework shines. The Backbone.View object also plays a great part in ensuring the separation of DOM manipulation code from rest of your app, and along with the underscore template library, it becomes a power combination for rendering DOM! With underscore templates, you can actually use javascript functions and variables inside a template, not just clumsy tags like ng-something!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;{.default .prettyprint .prettyprinted}
&amp;lt;% if(modal['buttons']) { %&amp;gt;
  &amp;lt;div class="ui-button-container"&amp;gt;
    &amp;lt;% _(model['buttons']).each(function(button) { %&amp;gt;
      &amp;lt;a class="ui-button ui-button-pill &amp;lt;%= button.extra_class %&amp;gt; " href="&amp;lt;%= button.href %&amp;gt;"&amp;gt;
        &amp;lt;span class="label"&amp;gt;
          &amp;lt;span class="section"&amp;gt;&amp;lt;%= button.label %&amp;gt;&amp;lt;/span&amp;gt; 
        &amp;lt;/span&amp;gt;
      &amp;lt;/a&amp;gt;
    &amp;lt;% }) %&amp;gt;
  &amp;lt;/div&amp;gt;
&amp;lt;% } %&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Of course, its not a very good practice to mix javascript with templates, but it just shows the power and flexibility of using backbone+underscore compared to other vendor frameworks.&lt;/p&gt;
&lt;p&gt;Ultimately, it all comes down to your preference, you can use angular or vue or react if you really want to. However, always understand the reason why you are hooking to a third party framework. If it is just for escaping the complexity of your app, then no amount of framework or libraries in the world are going to help you. Passing on the complexity to a black box like angular or vue is just a band-aid solution that will fall apart the moment you scale in complexity and you'll get stuck by the limitations of the framework. At that point, you'll have to make one of these two decisions:&lt;/p&gt;
&lt;p&gt;1. Abandon the framework and do everything right from scratch using the manual way of Backbone.&lt;/p&gt;
&lt;p&gt;2. Understand the framework internals too deeply and customize it to achieve what you want (but then what was the point of using this framework in the first place?)&lt;/p&gt;
&lt;p&gt;Ultimately, its your decision to choose a framework. Consider it wisely after weighing in all the pros and cons. Best of luck!&lt;/p&gt;</content><category term="JavaScript"></category><category term="Web Development"></category></entry></feed>